library(MOFA2)
library(readxl)
library(Rtsne)
library(ggplot2)
library(dplyr)
library(grid)
Meta_Data = read.table('Modified_Meta_Data.csv', header = TRUE, sep = ',')
mRNA_Data = read.table('Modified_mRNA_Data.csv', header = TRUE, sep = ',')
scaled_mRNA <- scale(transformed_data)
# Function to check if a row contains more than 50% zeros
has_more_than_50_percent_zeros <- function(row) {
  zero_count <- sum(row == 0)
  zero_count > (length(row) / 2)
}

# Identify rows with more than 50% zeros
rows_to_remove <- apply(mRNA_Data, 1, has_more_than_50_percent_zeros)

# Remove rows with more than 50% zeros
mRNA_Data <- mRNA_Data[!rows_to_remove, , drop = FALSE]

# Replace remaining zeros with row means
mRNA_Data[rowSums(mRNA_Data == 0) > 0, ] <- t(apply(mRNA_Data[rowSums(mRNA_Data == 0) > 0, ], 1, function(row) {
  row[row == 0] <- mean(row[row != 0])
  row
}))
Methylation_Data = read.table('Modified_Methylation_Data.csv', header = TRUE, sep = ',')
scaled_Methylation <- scale(Methylation_Data)
Microbiome_Data = read.table('Modified_Microbiome_Data.csv', header = TRUE, sep = ',')
scaled_microbiome <- scale(Microbiome_Data)
# Get column names for each matrix
colnames_matrix1 <- colnames(scaled_Methylation)
colnames_matrix2 <- colnames(scaled_microbiome)
colnames_matrix3 <- colnames(scaled_mRNA)
# Check if column names are the same across all matrices
are_column_names_equal <- identical(colnames_matrix1, colnames_matrix2) &&
                         identical(colnames_matrix1, colnames_matrix3) &&
                         identical(colnames_matrix1, colnames_matrix4)

# Print the result
if (are_column_names_equal) {
  print("Column names are the same across all matrices.")
} else {
  print("Column names are not the same across all matrices.")
}
data <- make_example_data(
  n_views = 3, 
  n_samples = 200, 
  n_features = 100, 
  n_factors = 10
)[[1]]

names(data) <- c("Transcriptomics", "Epigenomics", "Microbiomics")
#add to each list the omics 

data[["Transcriptomics"]] = scaled_mRNA
data[["Epigenomics"]] = scaled_Methylation
data[["Microbiomics"]] = scaled_microbiome

MOFAobject <- create_mofa(data)
MOFAobject
#overview of training data ## The rows are the different views and columns are samples. Missing values are indicated by a grey bar.
plot_data_overview(MOFAobject)
#Fit the MOFA model
#Define options
data_opts <- get_default_data_options(MOFAobject)
data_opts
#Define model options
model_opts <- get_default_model_options(MOFAobject)
model_opts 
#Define training options
train_opts <- get_default_training_options(MOFAobject)
train_opts
train_opts$convergence_mode ="slow"
train_opts$maxiter =400000
train_opts
MOFAobject <- prepare_mofa(
  object = MOFAobject,
  data_options = data_opts,
  model_options = model_opts,
  training_options = train_opts
#Run MOFA This step can take some time 
MOFAobject <- run_mofa(MOFAobject,use_basilisk = TRUE)
r2 <- get_variance_explained(MOFAobject)
r2$r2_total
# Variance explained by each factor in each view
head(r2$r2_per_factor)
plot_variance_explained(MOFAobject)
# Assuming Metadata is your metadata data frame and Sample.ID is the column containing sample names
Meta_Data$sample <- Meta_Data$Sample.ID

# Now assign the Metadata object to the samples_metadata slot of MOFAobject
samples_metadata(MOFAobject) <- Meta_Data
# model <- run_umap(model)
model <- run_tsne(MOFAobject)


MOFA_tSNE = plot_dimred(model,
  method = "TSNE",  # method can be either "TSNE" or "UMAP"
  color_by = "Subtype"
)
ggsave("tSNE_MOFA_plot.png", plot = MOFA_tSNE, width = 10, height = 8, units = "in", dpi = 1200)

latent_data  = read.table('latent_data.csv', header = TRUE, sep = ',')
latent_data 
features <- latent_data[,-1]
# Run t-SNE on the feature set
set.seed(42)  # Set a seed for reproducibility
MoGCN_tsne_results <- Rtsne(as.matrix(features), perplexity = 30, check_duplicates = FALSE)
# Combine the t-SNE output with the metadata using 'Sample.ID' as the key
tsne_data <- as.data.frame(MoGCN_tsne_results$Y)
tsne_data$Sample <- latent_data$Sample

# Join by sample ID
tsne_data <- tsne_data %>%
  left_join(Meta_Data, by = c("Sample" = "Sample.ID"))

# Create the t-SNE plot colored by subtype
MOGCN_tSNE = ggplot(tsne_data, aes(x = V1, y = V2, color = Subtype)) +  # Replace 'Subtype' with the actual subtype column name in metadata
  geom_point() +
  labs(title = "t-SNE plot colored by Subtype", x = "t-SNE Dimension 1", y = "t-SNE Dimension 2") +
  theme_minimal()
ggsave("tSNE_MOFA_plot.png", plot = MOGCN_tSNE, width = 10, height = 8, units = "in", dpi = 1200)


